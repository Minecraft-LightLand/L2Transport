buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = "${ll_version}"
group = 'dev.xkmc.lasertransport' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'lasertransport'
jarJar.enable()

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: "${minecraft_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            arg '-mixin.config=lasertransport.mixins.json'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                lasertransport {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg '-mixin.config=lasertransport.mixins.json'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                lasertransport {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            arg '-mixin.config=lasertransport.mixins.json'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'lasertransport', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                lasertransport {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, 'lasertransport.refmap.json'
    config 'lasertransport.mixins.json'
}

repositories {
    maven { url 'https://jitpack.io' }
    maven {
        // Location of the maven for mixed mappings, Registrate, and Flywheel
        name 'tterrag maven'
        url 'https://maven.tterrag.com/'
    }
    maven {
        // Location of the maven that hosts JEI files (and TiC)
        name 'Progwml6 maven'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        // Location of the maven for vazkii's mods
        name 'blamejared'
        url 'https://maven.blamejared.com'
    }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    flatDir{
        dirs 'libs'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:${mixin_extras_version}"))
    implementation("com.github.llamalad7.mixinextras:mixinextras-forge:${mixin_extras_version}")
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    implementation fg.deobf("dev.xkmc.l2library:l2library:${l2library_version}-slim")
    implementation fg.deobf(jarJar("dev.xkmc.l2modularblock:l2modularblock:1.0.0") {
        transitive = false
        jarJar.ranged(it, "[1.0.0,)")
    })
    implementation fg.deobf("dev.xkmc.l2serial:l2serial:1.0.0")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

    runtimeOnly fg.deobf("dev.xkmc.l2complements:l2complements:2.2.0.pre0")
    runtimeOnly fg.deobf("dev.xkmc.modulargolems:modulargolems:2.2.0.pre3")
    runtimeOnly fg.deobf("dev.xkmc.l2backpack:l2backpack:2.2.0.pre2-slim")
    runtimeOnly fg.deobf("dev.xkmc.l2artifacts:l2artifacts:2.2.0.pre2")
    runtimeOnly fg.deobf("dev.xkmc.l2archery:l2archery:2.2.0.pre1")

    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    implementation fg.deobf("mezz.jei:jei-${jei_minecraft_version}:${jei_version}")

    runtimeOnly fg.deobf('curse.maven:wthit-forge-455982:4512108')
    runtimeOnly fg.deobf('curse.maven:badpackets-615134:4438956')
    runtimeOnly fg.deobf('curse.maven:attributefix-280510:4445193')
    runtimeOnly fg.deobf('curse.maven:max-health-fix-492246:4447240')

    //runtimeOnly fg.deobf('curse.maven:bookshelf-228525:4454755')
    //runtimeOnly fg.deobf('curse.maven:enchantment-descriptions-250419:4445054')
    //runtimeOnly fg.deobf('curse.maven:appleskin-248787:4440123')
    //implementation fg.deobf('curse.maven:the-twilight-forest-227639:4516391')

    //runtimeOnly fg.deobf('curse.maven:storage-drawers-223852:3884263')
    //implementation fg.deobf('curse.maven:mekanism-268560:3954410')
    //implementation fg.deobf('curse.maven:create-328085:4174330')
    //implementation fg.deobf('curse.maven:ars-nouveau-401955:4391866')
    //implementation fg.deobf('curse.maven:botania-225643:4371117')
    //runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.19.2-76")

}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "lasertransport",
                "Specification-Vendor"    : "xkmc",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "xkmc",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs'            : 'lasertransport.mixins.json'
        ])
    }
}

reobf {
    jarJar {}
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.jarJar.finalizedBy('reobfJarJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.jarJar.configure {
    // remove '-all' from jarJar jar file
    classifier ''
}

jar {
    // this now conflicts with jarJar as filenames are the same
    // append a `-slim` to this jar, as this jar contains no pre-packaged libs
    classifier 'slim'
}
